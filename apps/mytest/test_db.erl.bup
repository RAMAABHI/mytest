-module(test_db).
-compile([export_all]).

-define(COLLECTION,<<"movies">>).
-define(DATABASE,<<"test">>).

mongo_db_connection_identifier() ->
  case application:get_env(mongodb,connection) of
     {ok,Connection} ->
         case Connection of
             Pid when erlang:is_pid(Connection) ->
                 ok;
             undefined -> 
                mongodb_connect()
         end;       
     undefined ->
            mongodb_connect()
 end.


mongodb_connect() ->
 Database = <<"test">>,
 case mc_worker_api:connect([{database,?DATABASE}]) of
    {ok,Connection} ->
        application:set_env(mongodb,connection,Connection),
        ok;
    {error,Reason} ->
        application:set_env(mongodb,connection,undefined),
        io:format("DB Down"),
        ok
 end.


create_tickets(Request) ->
   mongo_db_connection_identifier(),
   io:format("The value of ~p~n is",[Request]),
   case application:get_env(mongodb,connection) of
      {ok,Connection} ->
         io:format("This is the data we are updating"),
         case maps:get(<<"imdbid">>,Request) of
           Value ->
             case mc_worker_api:find_one(Connection,?COLLECTION,#{<<"imdbid">> => Value} ) of
                 undefined ->
                    io:format("~p~n",[application:get_env(mongodb,connection)]),
                     case  mc_worker_api:insert(Connection,?COLLECTION,[Request]) of
                        {{true,_},_} -> 
                           io:format("This is defined value"), true;
                        {{false,_},_} -> io:format("This is undefined value"), false
                     end;
                 {ok,Data} ->
                      data_already_exist_for_this_ones
             end;
           {badmap,_} ->
        
               no_imdbid
         end;
       undefined -> 
           database_not_ready
     end.
       
      

update_booking_tickets(Request) ->
 mongo_db_connection_identifier(),
 case application:get_env(mongodb,connection) of
     {ok,Connection} -> 
         case mc_worker_api:find_one(Connection,?COLLECTION,Request) of 
             undefined ->
                  no_details_found;
             {ok,[Data]} ->
                case  mc_worker_api:update(Connection, ?COLLECTION, #{<<"_id">> => 100}, command1)  of
                    {true,_} ->  success;
                    {false,_} -> failure
                end
         end;
     undefined ->
         database_not_ready
 end.

get_movie(Id) ->
 mongo_db_connection_identifier(),
 case application:get_env(mongodb,connection) of
     {ok,Connection} ->           
         case mc_worker_api:find_one(Connection,?COLLECTION,Id) of      
             undefined ->
                  no_details_found;
             {ok,[Data]} ->
                  Data
         end;
     undefined ->
         database_not_ready
 end.

get_movies_list() ->
   mongo_db_connection_identifier(),
   case application:get_env(mongodb,connection) of
       {ok,Connection} ->
          List = get_total_movies(),
           {ok, TeamsCur} = mc_worker_api:find(Connection,?COLLECTION, #{})
       ;
       undefined ->
         database_not_ready
 end.
           

get_total_movies() ->
   get_total_movies([]).

get_total_movies(Acc) -> ok.
    
delete_movies(Request) ->
   mongo_db_connection_identifier(),
   case application:get_env(mongodb,connection) of
       {ok,Connection} ->
           case mc_worker_api:delete(Connection,?COLLECTION, selector) of
               {true,_} ->true ;
               {false,_} -> false 
           end;
        undefined ->
          database_not_ready
   end.
